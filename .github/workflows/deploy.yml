name: Deploy to VPS

on:
  push:
    branches: [main]
  workflow_dispatch:

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run type check
        run: npm run check

      - name: Build application
        run: npm run build

  deploy:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub (optional)
        if: ${{ secrets.DOCKER_HUB_TOKEN }}
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_TOKEN }}

      - name: Build Docker image
        run: |
          docker build -t stable-crm:latest .
          docker save stable-crm:latest | gzip > stable-crm-latest.tar.gz

      - name: Copy files to VPS
        uses: appleboy/scp-action@v0.1.5
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USERNAME }}
          key: ${{ secrets.VPS_SSH_KEY }}
          port: ${{ secrets.VPS_SSH_PORT || 22 }}
          source: "stable-crm-latest.tar.gz,docker-compose.yml,nginx/"
          target: "/opt/stable-crm"

      - name: Deploy on VPS
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USERNAME }}
          key: ${{ secrets.VPS_SSH_KEY }}
          port: ${{ secrets.VPS_SSH_PORT || 22 }}
          script: |
            cd /opt/stable-crm
            
            # Load Docker image
            docker load < stable-crm-latest.tar.gz
            rm stable-crm-latest.tar.gz
            
            # Run database migrations
            docker-compose run --rm app npm run db:push
            
            # Start services
            docker-compose up -d
            
            # Clean up old images
            docker image prune -f
            
            # Health check
            sleep 30
            curl -f http://localhost:3000/api/auth/me || exit 1
            
            echo "Deployment completed successfully!"